Отчет по выполнению задания:

- Чтение файлов:
    - Я освоил синхронные и асинхронные методы чтения файлов в Node.js, используя fs.readFileSync и fs.readFile. Теперь я понимаю разницу между блокирующими и неблокирующими операциями и знаю, когда лучше применять каждый из подходов.

- Запись и дозапись в файлы:
    - Я научился записывать данные в файлы как синхронно (fs.writeFileSync), так и асинхронно (fs.writeFile). Кроме того, я освоил добавление данных в конец файла с помощью fs.appendFile, что позволяет мне эффективно управлять содержимым файлов.

- Удаление файлов:
    - Я реализовал удаление файлов как синхронно (fs.unlinkSync), так и асинхронно (fs.unlink). Теперь я осознаю важность управления порядком выполнения операций, чтобы избежать конфликтов и ошибок.

- Работа с событиями:
    - Я создал и использовал события с помощью класса EventEmitter, научившись связывать обработчики с событиями и передавать параметры в события. Это дало мне лучшее понимание событийной модели Node.js.

- Наследование от EventEmitter:
    - Я изучил два подхода к наследованию от EventEmitter, используя функцию util.inherits и возможности ES6. Это позволило мне расширять функциональность объектов с событиями и применять их в более сложных сценариях.

- Потоки данных:
    - Я использовал потоки для чтения и записи данных в файлы с помощью fs.createReadStream и fs.createWriteStream. Теперь я понимаю, как потоки позволяют обрабатывать большие объемы данных по частям, что улучшает производительность приложений.

- Каналы (Pipe):
    - Я применил каналы (pipe) для копирования данных между потоками, что является эффективным методом передачи данных в Node.js. Это позволило мне сократить код и повысить его эффективность.

- Архивация данных:
    - Я использовал модуль zlib для сжатия данных, создавая архивы файлов. Я практиковался в создании цепочек операций с использованием pipe, что дало мне уверенность в работе с потоками.